<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/mvc
		http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/aop
		http://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx.xsd">


	<!-- Add AspectJ auotproxy support for AOP -->
	<aop:aspectj-autoproxy/>
	
	<!-- Step 3: Add support for component scanning -->
	<context:component-scan
		base-package="pl.undemy.main" />

	<!-- Step 4: Add support for conversion, formatting and validation support -->
	<mvc:annotation-driven />

	<!-- Step 5: Define Spring MVC view resolver -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/view/" />
		<property name="suffix" value=".jsp" />
	</bean>

	<!-- Define Database DataSource / connection pool -->

	<bean id="myDataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName"
			value="org.postgresql.Driver"></property>
		<property name="url"
			value="jdbc:postgresql://localhost:5432/learn"></property>
		<property name="username" value="verto"></property>
		<property name="password" value="vertoverto"></property>
	</bean>

	<!-- setup Hibernate session factory -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
		<property name="dataSource" ref="myDataSource" />
		<property name="packagesToScan" value="pl.undemy.main.entity" />
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.PostgreSQL9Dialect</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.default_schema">learn</prop>
			</props>
		</property>
	</bean>


	<!-- Setup Hibernate transaction manager -->
	<bean id="myTransactionManager"
		class="org.springframework.orm.hibernate5.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<!-- Enable configuration of transaction behavior base on annotations -->
	<tx:annotation-driven
		transaction-manager="myTransactionManager" />
	<!-- load custom message resources -->

	<bean id="messageSource"
		class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="basenames" value="main/resources/messages" />
	</bean>

	<!-- Add support for reading web resources: css, images, js, etc ...  I was so fucking difficult to set this staff correctly. Location must to be /src/main/resources if I use Maven folder structure-->
	<mvc:resources location="/resources/" mapping="/resources/**"></mvc:resources>
</beans>





